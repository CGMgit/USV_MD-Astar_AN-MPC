import heapq
import math
import pandas as pd
# 点的坐标数据
points_locations = [
    ("港口", "葵青货柜码头", 12622.956, 6076.803),
    ("港口", "西区公用码头", 13532.533, 926.254),
    ("港口", "西区公用货物装卸区", 12272.09, 183.472),
    ("港口", "中环码头", 16344.608, 876.216),
    ("港口", "尖沙咀码头", 17294.314, 1525.594),
    ("港口", "观塘码头", 23253.897, 3558.238),
    ("港口", "红磡码头", 20065.232, 2276.16),
    ("避风塘", "油麻地避风塘", 16152.198, 3378.102),
    ("避风塘", "昂船洲避风塘", 13890.602, 3558.238),
    ("避风塘", "九龙湾避风塘", 11832.735, 2557.483),
    ("避风塘", "北角避风塘", 13067.455, 3335.848),
    ("避风塘", "青衣避风塘", 15434.002, 2779.873),
    ("避风塘", "香港仔避风塘", 12141.415, 2112.704),
    ("避风塘", "铜锣湾避风塘", 19292.503, 277.987),
    ("避风塘", "鲤鱼门避风塘", 24488.617, 1667.924),
    ("锚地", "西部检疫及入境锚地", 10630.941, 3071.204),
    ("锚地", "西部危险品锚地", 11721.61, 3713.911),
    ("锚地", "基列特 3 号", 13415.235, 2918.867),
    ("锚地", "基列特 2 号", 12743.341, 2396.251),
    ("锚地", "基列特 1 号", 10839.814, 2096.024),
    ("锚地", "东部锚地", 25723.337, 0.0),
    ("锚地", "中部锚地", 21607.603, 1111.949),
]

# 连接关系
defined_connections = [
    ("中环码头", "铜锣湾避风塘"),
    ("尖沙咀码头", "油麻地避风塘"),
    ("观塘码头", "鲤鱼门避风塘"),
    ("红磡码头", "九龙湾避风塘"),
    ("葵青货柜码头", "青衣避风塘"),
    ("油麻地避风塘", "昂船洲避风塘"),
    ("九龙湾避风塘", "鲤鱼门避风塘"),
    ("铜锣湾避风塘", "北角避风塘"),
    ("鲤鱼门避风塘", "东部锚地"),
    ("九龙湾避风塘", "昂船洲避风塘"),
    ("油麻地避风塘", "北角避风塘"),
    ("青衣避风塘", "昂船洲避风塘"),
    ("北角避风塘", "昂船洲避风塘"),
    ("北角避风塘", "油麻地避风塘"),
    ("鲤鱼门避风塘", "九龙湾避风塘"),
    ("油麻地避风塘", "西部检疫及入境锚地"),
    ("鲤鱼门避风塘", "东部锚地"),
    ("九龙湾避风塘", "基列特 1 号"),
    ("九龙湾避风塘", "中部锚地"),
    ("青衣避风塘", "基列特 3 号"),
    ("铜锣湾避风塘", "基列特 2 号"),
    ("九龙湾避风塘", "西部检疫及入境锚地"),
    ("东部锚地", "基列特 1 号"),
    ("西部检疫及入境锚地", "西部危险品锚地"),
    ("西部检疫及入境锚地", "基列特 3 号"),
    ("东部锚地", "中部锚地"),
    ("基列特 3 号", "基列特 2 号"),
    ("基列特 2 号", "基列特 1 号"),
    ("西部危险品锚地", "基列特 1 号"),
    ("中部锚地", "基列特 2 号"),
    ("西部危险品锚地", "基列特 3 号"),
    ("西部检疫及入境锚地", "中环码头"),
    ("东部锚地", "观塘码头"),
    ("基列特 1 号", "红磡码头"),
    ("基列特 3 号", "尖沙咀码头"),
    ("观塘码头", "中部锚地"),
    ("西区公用码头", "西部检疫及入境锚地"),
    ("西区公用货物装卸区", "基列特 3 号"),
    ("葵青货柜码头", "西部检疫及入境锚地"),
    ("尖沙咀码头", "基列特 2 号")
]

# 定义权重关系数据（包含穿越交点总长度）
weight_relations = [
    # 起点, 终点, 欧几里得距离 (m), 穿越交点总长度 (m), 障碍物绕行距离 (m), 最终权重 (m), 穿越障碍物
    ("中环码头", "铜锣湾避风塘", 3007.98, 0.0, 0.0, 3007.98, "无"),
    ("尖沙咀码头", "油麻地避风塘", 2176.28, 88.19, 155.58, 2274.79, "油麻地避风塘渔船区"),
    ("观塘码头", "鲤鱼门避风塘", 2257.84, 0.0, 0.0, 2257.84, "无"),
    ("红磡码头", "九龙湾避风塘", 6591.04, 1320.66, 10679.98, 18086.36, "九龙边界"),
    ("葵青货柜码头", "青衣避风塘", 4332.64, 987.17, 3064.54, 7022.92, "7号货柜码头, 昂船洲, 政府船只维修码头"),
    ("油麻地避风塘", "昂船洲避风塘", 2268.76, 0.0, 0.0, 2268.76, "无"),
    ("九龙湾避风塘", "鲤鱼门避风塘", 12687.11, 3069.72, 4329.09, 14812.29, "九龙边界"),
    ("铜锣湾避风塘", "北角避风塘", 6935.54, 221.1, 351.64, 7136.4, "九龙边界, 香港北角边界"),
    ("鲤鱼门避风塘", "东部锚地", 2075.21, 0.0, 0.0, 2075.21, "无"),
    ("九龙湾避风塘", "昂船洲避风塘", 2288.3, 0.0, 0.0, 2288.3, "无"),
    ("油麻地避风塘", "北角避风塘", 3085.03, 0.0, 0.0, 3085.03, "无"),
    ("青衣避风塘", "昂船洲避风塘", 1728.56, 0.0, 0.0, 1728.56, "无"),
    ("北角避风塘", "昂船洲避风塘", 852.66, 0.0, 0.0, 852.66, "无"),
    ("北角避风塘", "油麻地避风塘", 3085.03, 0.0, 0.0, 3085.03, "无"),
    ("鲤鱼门避风塘", "九龙湾避风塘", 12687.11, 3069.72, 4329.09, 14812.29, "九龙边界"),
    ("油麻地避风塘", "西部检疫及入境锚地", 5529.78, 0.0, 0.0, 5529.78, "无"),
    ("九龙湾避风塘", "基列特 1 号", 1094.91, 0.0, 0.0, 1094.91, "无"),
    ("九龙湾避风塘", "中部锚地", 9881.17, 3320.11, 11770.24, 20685.35, "九龙边界, 香港北角边界"),
    ("青衣避风塘", "基列特 3 号", 2023.55, 0.0, 0.0, 2023.55, "无"),
    ("铜锣湾避风塘", "基列特 2 号", 6883.21, 0.0, 0.0, 6883.21, "无"),
    ("九龙湾避风塘", "西部检疫及入境锚地", 1306.99, 0.0, 0.0, 1306.99, "无"),
    ("东部锚地", "基列特 1 号", 15030.39, 4805.16, 5665.13, 17023.38, "九龙边界, 香港北角边界"),
    ("西部检疫及入境锚地", "西部危险品锚地", 1265.95, 0.0, 0.0, 1265.95, "无"),
    ("西部检疫及入境锚地", "基列特 3 号", 2788.46, 0.0, 0.0, 2788.46, "无"),
    ("东部锚地", "中部锚地", 4263.3, 827.35, 9595.37, 14950.38, "香港北角边界"),
    ("基列特 3 号", "基列特 2 号", 851.22, 0.0, 0.0, 851.22, "无"),
    ("基列特 2 号", "基列特 1 号", 1927.06, 0.0, 0.0, 1927.06, "无"),
    ("西部危险品锚地", "基列特 1 号", 1842.59, 0.0, 0.0, 1842.59, "无"),
    ("中部锚地", "基列特 2 号", 8956.82, 3305.04, 11737.0, 19736.18, "九龙边界, 香港北角边界"),
    ("西部危险品锚地", "基列特 3 号", 1870.95, 0.0, 0.0, 1870.95, "无"),
    ("西部检疫及入境锚地", "中环码头", 6120.78, 0.0, 0.0, 6120.78, "无"),
    ("东部锚地", "观塘码头", 4331.19, 0.0, 0.0, 4331.19, "无"),
    ("基列特 1 号", "红磡码头", 7580.32, 1339.51, 10848.67, 19259.2, "香港仔避风塘渔船区, 九龙边界"),
    ("基列特 3 号", "尖沙咀码头", 4121.71, 0.0, 0.0, 4121.71, "无"),
    ("观塘码头", "中部锚地", 2948.66, 73.35, 10349.37, 15294.56, "香港北角边界"),
    ("西区公用码头", "西部检疫及入境锚地", 3608.33, 0.0, 0.0, 3608.33, "无"),
    ("西区公用货物装卸区", "基列特 3 号", 2964.65, 0.0, 0.0, 2964.65, "无"),
    ("葵青货柜码头", "西部检疫及入境锚地", 3605.79, 0.0, 0.0, 3605.79, "无"),
    ("尖沙咀码头", "基列特 2 号", 4633.51, 0.0, 0.0, 4633.51, "无"),
]

# 组织数据结构
locations = {name: (x, y) for _, name, x, y in points_locations}
graph = {name: [] for name in locations.keys()}
costs = {}

for start, end, euclidean_dist, crossing_length, detour_dist, final_weight, _ in weight_relations:
    graph[start].append((end, final_weight))
    graph[end].append((start, final_weight))  # 假设是无向图
    costs[(start, end)] = detour_dist
    costs[(end, start)] = detour_dist  # 也存储反向绕行距离

# **MD-A* 启发式函数（新版）**
def md_a_star_heuristic(node, goal):
    """
    计算 MD-A* 启发式：
    h(n) = 欧几里得距离 + 该节点绕行-穿越差值最小的边的代价
    """
    x1, y1 = locations[node]
    x2, y2 = locations[goal]
    euclidean_dist1 = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

    neighbor_costs = []
    for neighbor, _ in graph[node]:
        # 注意：需要从weight_relations里找 detour和crossing
        for record in weight_relations:
            start1, end1, euclidean_d, crossing_length1, detour_dist1, final_weight1, _ = record
            if (node == start1 and neighbor == end1) or (node == end1 and neighbor == start1):
                # 计算 detour - crossing
                cost_difference = max(detour_dist1 - crossing_length1, 0)
                neighbor_costs.append((neighbor, cost_difference))
                break

    if neighbor_costs:
        best_neighbor, min_cost_difference = min(neighbor_costs, key=lambda x: x[1])
    else:
        best_neighbor, min_cost_difference = None, 0  # 没有可选绕行路径时，设为0

    heuristic_value = euclidean_dist1 + min_cost_difference

    # 记录调试信息
    heuristic_debug.append({
        "节点": node,
        "目标": goal,
        "欧几里得距离": euclidean_dist1,
        "选取的邻居": f"{node} -> {best_neighbor}" if best_neighbor else "无",
        "最小绕行-穿越差值": min_cost_difference,
        "最终启发式值 h(n)": heuristic_value
    })

    return heuristic_value

# **A* 搜索算法**
def a_star(start1, goal):
    """
    使用 MD-A* 进行路径搜索
    """
    open_set = []
    heapq.heappush(open_set, (0, start1))  # (优先级, 节点)
    came_from = {}  # 记录最优路径
    g_score = {node: float("inf") for node in graph}
    g_score[start1] = 0
    f_score = {node: float("inf") for node in graph}
    f_score[start1] = md_a_star_heuristic(start1, goal)

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path1 = []
            while current in came_from:
                path1.append(current)
                current = came_from[current]
            path1.append(start1)
            return path1[::-1]  # 反转路径

        for neighbor, weight in graph[current]:
            tentative_g_score = g_score[current] + weight

            if tentative_g_score < g_score[neighbor]:  # 找到更优路径
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + md_a_star_heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return None  # 无法到达目标

# **测试 & 记录启发式计算过程**
heuristic_debug = []  # 存储启发式计算过程

start_node = "观塘码头"
goal_node = "葵青货柜码头"
path = a_star(start_node, goal_node)

if path:
    print("最优路径:", " -> ".join(path))
else:
    print("未找到可行路径")

# **输出调试文件**
df = pd.DataFrame(heuristic_debug)
df.to_csv("MD-A_heuristic_debug.csv", index=False)

print("启发式计算细节已保存到 MD-A_heuristic_debug.csv")
